{"version":3,"sources":["../src/p2pkh.es6"],"names":[],"mappings":";;;;;;AAIA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,WAAW,QAAQ,UAAR,CAAjB;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;;AAEA,IAAM,kBAAkB,IAAI,MAAJ,CAAW,kEAAX,EAA+E,KAA/E,CAAxB;AACA,IAAM,kBAAkB,IAAI,MAAJ,CAAW,kEAAX,EAA+E,KAA/E,CAAxB;;AAEA,SAAS,kBAAT,CAA4B,UAA5B,EAAwC;AACpC,QAAI,UAAU,IAAd;;;AAGA,QAAI,WAAW,OAAX,CAAmB,eAAnB,IAAsC,CAA1C,EAA6C;AACzC,kBAAU,KAAV;AACH;;;AAGD,QAAI,WAAW,OAAX,CAAmB,eAAnB,IAAsC,CAA1C,EAA6C;AACzC,kBAAU,KAAV;AACH;;AAED,WAAO,OAAP;AACH;;AAED,IAAI,mBAAJ;;AAEA,GAAG;AACC,iBAAa,OAAO,WAAP,CAAmB,EAAnB,CAAb;AACH,CAFD,QAES,CAAC,mBAAmB,UAAnB,CAFV;AAGA,QAAQ,GAAR,CAAY,cAAZ;AACA,QAAQ,GAAR,CAAY,UAAZ;;AAEA,IAAI,YAAY,SAAS,SAAT,CAAmB,UAAnB,CAAhB;AACA,QAAQ,GAAR,CAAY,aAAZ;AACA,QAAQ,GAAR,CAAY,SAAZ;;AAEA,IAAI,UAAU,OAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,CAAmC,SAAnC,EAA8C,MAA9C,EAAd;AACA,QAAQ,GAAR,CAAY,cAAZ;AACA,QAAQ,GAAR,CAAY,OAAZ;;AAEA,IAAI,UAAU,OAAO,UAAP,CAAkB,WAAlB,EAA+B,MAA/B,CAAsC,OAAtC,EAA+C,MAA/C,EAAd;AACA,QAAQ,GAAR,CAAY,iBAAZ;AACA,QAAQ,GAAR,CAAY,OAAZ;;AAIA,IAAI,UAAU,IAAI,MAAJ,CAAW,IAAX,EAAiB,KAAjB,CAAd;AACA,IAAI,iBAAJ;AACA,WAAW,OAAO,MAAP,CAAc,CAAC,OAAD,EAAU,OAAV,CAAd,CAAX;AACA,WAAW,OAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,CAAmC,QAAnC,EAA6C,MAA7C,EAAX;AACA,WAAW,OAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,CAAmC,QAAnC,EAA6C,MAA7C,EAAX;AACA,WAAW,SAAS,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAX;;AAEA,QAAQ,GAAR,CAAY,WAAZ;AACA,QAAQ,GAAR,CAAY,QAAZ;;AAEA,IAAI,UAAU,OAAO,MAAP,CAAc,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,CAAd,CAAd;AACA,QAAQ,GAAR,CAAY,UAAZ;AACA,QAAQ,GAAR,CAAY,OAAZ;;AAEA,IAAI,cAAc,KAAK,MAAL,CAAY,OAAZ,CAAlB;AACA,QAAQ,GAAR,CAAY,mBAAZ;AACA,QAAQ,GAAR,CAAY,WAAZ","file":"p2pkh.js","sourcesContent":["/**\n * Created by diego on 13/06/16.\n */\n\nconst crypto = require('crypto');\nconst eccrypto = require('eccrypto');\nconst bs58 = require('bs58');\n\nconst MIN_PRIVATE_KEY = new Buffer('0000000000000000000000000000000000000000000000000000000000000001', 'hex');\nconst MAX_PRIVATE_KEY = new Buffer('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140', 'hex');\n\nfunction validatePrivateKey(privateKey) {\n    let isValid = true;\n\n    // must be at least the minimum\n    if (privateKey.compare(MIN_PRIVATE_KEY) < 0) {\n        isValid = false;\n    }\n\n    //must not exceed the maximum\n    if (privateKey.compare(MAX_PRIVATE_KEY) > 0) {\n        isValid = false;\n    }\n\n    return isValid;\n}\n\nlet privateKey;\n\ndo {\n    privateKey = crypto.randomBytes(32);\n} while (!validatePrivateKey(privateKey));\nconsole.log(\"Private key:\");\nconsole.log(privateKey);\n\nlet publicKey = eccrypto.getPublic(privateKey);\nconsole.log(\"Public key:\");\nconsole.log(publicKey);\n\nlet hash256 = crypto.createHash('sha256').update(publicKey).digest();\nconsole.log(\"Hash sha256:\");\nconsole.log(hash256);\n\nlet hash160 = crypto.createHash('ripemd160').update(hash256).digest();\nconsole.log(\"Hash ripemd160:\");\nconsole.log(hash160);\n\n\n\nlet version = new Buffer('00', 'hex');\nlet checksum;\nchecksum = Buffer.concat([version, hash160]);\nchecksum = crypto.createHash('sha256').update(checksum).digest();\nchecksum = crypto.createHash('sha256').update(checksum).digest();\nchecksum = checksum.slice(0, 4);\n\nconsole.log(\"Checksum:\");\nconsole.log(checksum);\n\nlet address = Buffer.concat([version, hash160, checksum]);\nconsole.log(\"Address:\");\nconsole.log(address);\n\nlet addressbs58 = bs58.encode(address);\nconsole.log(\"Address (base58):\");\nconsole.log(addressbs58);\n\n"]}